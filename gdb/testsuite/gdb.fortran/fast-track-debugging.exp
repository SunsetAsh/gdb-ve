#   Copyright 2018 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test for Cray Fast Track Debugging (FTD). The test source is assembly and
# DWARF generated by the Cray compiler.
# Test FTD works in Fortran when stepping in to, breaking on the name of and
# breaking in the body of a function

load_lib dwarf.exp
if { [skip_fortran_tests] } { return -1 }
load_lib "fortran.exp"
if {![dwarf2_support]} { return 0 }
if {![istarget "x86_64-*-*"]} { return 0 }

standard_testfile .s

proc prepare {} {
    global testfile srcfile
    if {[prepare_for_testing ${testfile}.exp $testfile $srcfile] } {
        return -1
    }
    if ![fortran_gdb_start] {
        untested "could not run to main in: $testfile"
        return -1
    }
}

proc assert_logistic_map {testprefix} {
    global decimal
    gdb_test "p x" "\\\$$decimal = 0.5" "initial p x $testprefix"
    foreach_with_prefix iteration {1 2 3 4 5}  {
        gdb_test "next 4" "" "next 4 $testprefix"
        # Should expect chaotic values between 0 and 1. This chaotic system
        # is used as it is fragile. Any bug which perturbs a beyond 4 will
        # cause the test program to diverge from the range [0,1].
        gdb_test "p x" "\\\$$decimal = 0.$decimal" "p x $testprefix"
    }
}

# Test that breaking on a function name works.
prepare
gdb_test "break logistic_map" \
         "Breakpoint $decimal at $hex: logistic\_map\. \\\(2 locations\\\)"
gdb_test "continue" "" "continue to logistic_map"
assert_logistic_map "break on function name"

# Test that stepping into a function works.
prepare
gdb_test "break 37" \
         "Breakpoint $decimal at $hex: file $testfile.f90, line 37."
gdb_test "step"
assert_logistic_map "stepping into function"

prepare
gdb_test "break recursive_subroutine" \
         "Breakpoint $decimal at $hex: recursive\_subroutine. \\\(2 locations\\\)"
foreach_with_prefix n {0 1 2 3 4 5} {
    gdb_test "continue"
    gdb_test "next"
    gdb_test "p n" "\\\$$decimal = 5"
    gdb_test "p x" "\\\$$decimal = $n"
}

# Test breaking within a function body works.
prepare
gdb_test "break 30" \
         "Breakpoint $decimal at $hex: .*$testfile.f90:30. \\\(2 locations\\\)"
gdb_test "continue" "" "continue to logistic_map function body"
gdb_test "p x" "\\\$$decimal = 0.5"
foreach_with_prefix iteration {1 2 3 4}  {
    gdb_test "next 4"

    gdb_test "p x" "\\\$$decimal = 0.$decimal"
}
