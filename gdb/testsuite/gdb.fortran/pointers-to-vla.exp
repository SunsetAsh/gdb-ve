# Copyright 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Richard Bunt. (richard.bunt@arm.com)

# This file is part of the gdb testsuite.  It contains tests for printing pointers to variable length arrays.

if { [skip_fortran_tests] } { return -1 }
load_lib "fortran.exp"

standard_testfile ".f90"

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \
     {debug f90}] } {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![fortran_gdb_start] {
    untested "could not run to main in: $testfile"
    return -1
}

set testplan [list \
"allocate(integerArrayTarget(1:10))" "p characterArrayTarget" "\\\('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'\\\)" \
"characterArrayPointer => characterArrayTarget(1:10)" "p integerArrayTarget" "\\\(2, 2, 2, 2, 2, 2, 2, 2, 2, 2\\\)" \
"integerArrayPointer => integerArrayTarget(1:10)" "p characterArrayPointer" "\\\('b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'\\\)" \
"characterSubArrayPointer => characterArrayTarget(2:9)" "p integerArrayPointer" "\\\(3, 3, 3, 3, 3, 3, 3, 3, 3, 3\\\)" \
"integerSubArrayPointer => integerArrayTarget(2:9)" "p characterSubArrayPointer" "\\\('s', 'b', 'b', 'b', 'b', 'b', 'b', 'e'\\\)" \
"deallocate(characterArrayTarget)" "p integerSubArrayPointer" "\\\(0, 3, 3, 3, 3, 3, 3, 9\\\)" \
"allocate(integerArrayTarget(-3:10))" "p characterArrayTarget" "\\\(('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')\\\)" \
"characterArrayPointer => characterArrayTarget(-3:10)" "p integerArrayTarget" "\\\(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2\\\)" \
"integerArrayPointer => integerArrayTarget(-3:10)" "p characterArrayPointer" "\\\(('b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b')\\\)" \
"characterSubArrayPointer => characterArrayTarget(-1:9)" "p integerArrayPointer" "\\\(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\\\)" \
"integerSubArrayPointer => integerArrayTarget(-1:9)" "p characterSubArrayPointer" "\\\('s', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e'\\\)" \
"integerSubArrayPointer(2) = 1" "p integerSubArrayPointer" "\\\(3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3\\\)" \
"allocate(integer2DArrayTarget(1:3,1:4))" "p character2DArrayTarget" "\\\(\\\( 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a'\\\) \\\)" \
"character2DArrayPointer => character2DArrayTarget(1:3,1:4)" "p integer2DArrayTarget" "\\\(\\\( 2, 2, 2\\\) \\\( 2, 2, 2\\\) \\\( 2, 2, 2\\\) \\\( 2, 2, 2\\\) \\\)" \
"integer2DSubArrayPointer => integer2DArrayTarget(2:3,2:3)" "p character2DSubArrayPointer" "\\\(\\\( 's', 'b'\\\) \\\( 'b', 'e'\\\) \\\)" \
"deallocate(character2DArrayTarget)" "p integer2DSubArrayPointer" "\\\(\\\( 0, 3\\\) \\\( 3, 9\\\) \\\)" \
"allocate(integer2DArrayTarget(-3:1,-4:2))" "p character2DArrayTarget" "\\\(\\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\( 'a', 'a', 'a', 'a', 'a'\\\) \\\)" \
"character2DArrayPointer => character2DArrayTarget(-3:1,-4:2)" "p integer2DArrayTarget" "\\\(\\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\( 2, 2, 2, 2, 2\\\) \\\)" \
"integer2DArrayPointer => integer2DArrayTarget(-3:1,-4:2)" "p character2DArrayPointer" "\\\(\\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\( 'b', 'b', 'b', 'b', 'b'\\\) \\\)" \
"character2DSubArrayPointer => character2DArrayTarget(-2:-1,-3:1)" "p integer2DArrayPointer" "\\\(\\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\( 3, 3, 3, 3, 3\\\) \\\)" \
"integer2DSubArrayPointer => integer2DArrayTarget(-2:-1,-3:1)" "p character2DSubArrayPointer" "\\\(\\\( 's', 'b'\\\) \\\( 'b', 'e'\\\) \\\( 'b', 'b'\\\) \\\( 'b', 'b'\\\) \\\( 'b', 'b'\\\) \\\)" \
"integer2DSubArrayPointer(2,2) = 10" "p integer2DSubArrayPointer" "\\\(\\\( 0, 3\\\) \\\( 3, 9\\\) \\\( 3, 3\\\) \\\( 3, 3\\\) \\\( 3, 3\\\) \\\)" \
]

foreach {line command output} $testplan {
    gdb_breakpoint $srcfile:[gdb_get_line_number $line]
    gdb_continue_to_breakpoint $srcfile:$line
    gdb_test $command $output
}
