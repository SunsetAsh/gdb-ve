#   Copyright 2018 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test for Cray Fast Track Debugging (FTD). The test source is assembly and
# DWARF generated by the Cray compiler.

load_lib dwarf.exp

if {![dwarf2_support]} { return 0 }
if {![istarget "x86_64-*-*"]} { return 0 }

standard_testfile .s

if {[prepare_for_testing ${testfile}.exp $testfile $srcfile] } {
    return -1
}

# Adding a breakpoint.  Basic first check, if the FTD code is completely
# broken this will crash.
gdb_test "break main" \
    "Breakpoint $decimal at $hex: file .*$testfile.c, line $decimal\."

# Test removing a breakpoint
gdb_test_no_output "delete 1"
gdb_test "info breakpoints" "No breakpoints or watchpoints."

# The breakpoint is placed on the optimized and unoptimized versions of
# the function
gdb_test "break do_1" \
    "Breakpoint $decimal at $hex: do\_1\. \\\(2 locations\\\)"

if ![runto_main] {
    return -1
}

gdb_test "break $testfile.c:31" \
    "Breakpoint $decimal at $hex: $testfile.c:31\. \\\(2 locations\\\)"

gdb_test "continue" "" "continue to break"

# Check that the backtrace has dbg$* function variants.
gdb_test "frame 0" "#0  dbg\\\$do\_3 \\\(\\\) at $testfile.c:31\r\n31.*printf\\\(.*\\\);" "frame after break"

# Check that the debugger can read the value of float_a.  As in a
# non-fast-track binary this value would be optimized out.
gdb_test "p float_a" "2.$decimal"

# Check that stepping into a function call lands in the debug variant of the
# function.  This is additionally performed through a function pointer in an
# effort to throw the debugger off.
gdb_test "break $testfile.c:59" \
    "Breakpoint $decimal at $hex: file .*$testfile.c, line 59\."
gdb_test "continue" "" "to function call"
gdb_test "step"
gdb_test "frame 0" "#0  dbg\\\$do\_3 \\\(\\\) at $testfile.c:25\r\n25.*void do_3 \\\(\\\)" "frame after step"
